/** Declaration file generated by dts-gen */

export const ALIAS_KEYS: {
    Argument: string[];
    BooleanValue: string[];
    Directive: string[];
    DirectiveDefinition: string[];
    Document: string[];
    EnumTypeDefinition: string[];
    EnumValue: string[];
    EnumValueDefinition: string[];
    Field: string[];
    FieldDefinition: string[];
    FloatValue: string[];
    FragmentDefinition: string[];
    FragmentSpread: string[];
    InlineFragment: string[];
    InputObjectTypeDefinition: string[];
    InputValueDefinition: string[];
    IntValue: string[];
    InterfaceTypeDefinition: string[];
    ListType: string[];
    ListValue: string[];
    Name: string[];
    NamedType: string[];
    NonNullType: string[];
    NullValue: string[];
    ObjectField: string[];
    ObjectTypeDefinition: string[];
    ObjectValue: string[];
    OperationDefinition: string[];
    OperationTypeDefinition: string[];
    ScalarTypeDefinition: string[];
    SchemaDefinition: string[];
    SelectionSet: string[];
    StringValue: string[];
    TypeExtensionDefinition: string[];
    UnionTypeDefinition: string[];
    Variable: string[];
    VariableDefinition: string[];
};

export const AST_TYPES: any;

export const BUILDER_KEYS: {
    Argument: string[];
    BooleanValue: string[];
    Directive: string[];
    DirectiveDefinition: string[];
    Document: string[];
    EnumTypeDefinition: string[];
    EnumValue: string[];
    EnumValueDefinition: string[];
    Field: string[];
    FieldDefinition: string[];
    FloatValue: string[];
    FragmentDefinition: string[];
    FragmentSpread: string[];
    InlineFragment: string[];
    InputObjectTypeDefinition: string[];
    InputValueDefinition: string[];
    IntValue: string[];
    InterfaceTypeDefinition: string[];
    ListType: string[];
    ListValue: string[];
    Name: string[];
    NamedType: string[];
    NonNullType: string[];
    NullValue: any[];
    ObjectField: string[];
    ObjectTypeDefinition: string[];
    ObjectValue: string[];
    OperationDefinition: string[];
    OperationTypeDefinition: string[];
    ScalarTypeDefinition: string[];
    SchemaDefinition: string[];
    SelectionSet: string[];
    StringValue: string[];
    TypeExtensionDefinition: string[];
    UnionTypeDefinition: string[];
    Variable: string[];
    VariableDefinition: string[];
};

export const DEFINITION_TYPES: any;

export const FLIPPED_ALIAS_KEYS: {
    AST: string[];
    Definition: string[];
    Selection: string[];
    Type: string[];
    TypeDefinition: string[];
    TypeSystemDefinition: string[];
    Value: string[];
};

export const NODE_FIELDS: {
    Argument: {
        name: {
            optional: boolean;
            validate: any;
        };
        value: {
            optional: boolean;
            validate: any;
        };
    };
    BooleanValue: {
        value: {
            optional: boolean;
            validate: any;
        };
    };
    Directive: {
        name: {
            optional: boolean;
            validate: any;
        };
    };
    DirectiveDefinition: {
        locations: {
            optional: boolean;
            validate: any;
        };
        name: {
            optional: boolean;
            validate: any;
        };
    };
    Document: {
        definitions: {
            optional: boolean;
            validate: any;
        };
    };
    EnumTypeDefinition: {
        directives: {
            optional: boolean;
            validate: any;
        };
        name: {
            optional: boolean;
            validate: any;
        };
        values: {
            optional: boolean;
            validate: any;
        };
    };
    EnumValue: {
        value: {
            optional: boolean;
            validate: any;
        };
    };
    EnumValueDefinition: {
        directives: {
            optional: boolean;
            validate: any;
        };
        name: {
            optional: boolean;
            validate: any;
        };
    };
    Field: {
        alias: {
            optional: boolean;
            validate: any;
        };
        directives: {
            optional: boolean;
            validate: any;
        };
        name: {
            optional: boolean;
            validate: any;
        };
        selectionSet: {
            optional: boolean;
            validate: any;
        };
    };
    FieldDefinition: {
        directives: {
            optional: boolean;
            validate: any;
        };
        name: {
            optional: boolean;
            validate: any;
        };
        type: {
            optional: boolean;
            validate: any;
        };
    };
    FloatValue: {
        value: {
            optional: boolean;
            validate: any;
        };
    };
    FragmentDefinition: {
        directives: {
            optional: boolean;
            validate: any;
        };
        name: {
            optional: boolean;
            validate: any;
        };
        selectionSet: {
            optional: boolean;
            validate: any;
        };
        typeCondition: {
            optional: boolean;
            validate: any;
        };
    };
    FragmentSpread: {
        directives: {
            optional: boolean;
            validate: any;
        };
        name: {
            optional: boolean;
            validate: any;
        };
    };
    InlineFragment: {
        directives: {
            optional: boolean;
            validate: any;
        };
        selectionSet: {
            optional: boolean;
            validate: any;
        };
        typeCondition: {
            optional: boolean;
            validate: any;
        };
    };
    InputObjectTypeDefinition: {
        directives: {
            optional: boolean;
            validate: any;
        };
        fields: {
            optional: boolean;
            validate: any;
        };
        name: {
            optional: boolean;
            validate: any;
        };
    };
    InputValueDefinition: {
        defaultValue: {
            optional: boolean;
            validate: any;
        };
        directives: {
            optional: boolean;
            validate: any;
        };
        name: {
            optional: boolean;
            validate: any;
        };
        type: {
            optional: boolean;
            validate: any;
        };
    };
    IntValue: {
        value: {
            optional: boolean;
            validate: any;
        };
    };
    InterfaceTypeDefinition: {
        directives: {
            optional: boolean;
            validate: any;
        };
        fields: {
            optional: boolean;
            validate: any;
        };
        name: {
            optional: boolean;
            validate: any;
        };
    };
    ListType: {
        type: {
            optional: boolean;
            validate: any;
        };
    };
    ListValue: {
        values: {
            optional: boolean;
            validate: any;
        };
    };
    Name: {
        value: {
            optional: boolean;
            validate: any;
        };
    };
    NamedType: {
        name: {
            optional: boolean;
            validate: any;
        };
    };
    NonNullType: {
        type: {
            optional: boolean;
            validate: any;
        };
    };
    NullValue: {
    };
    ObjectField: {
        name: {
            optional: boolean;
            validate: any;
        };
        value: {
            optional: boolean;
            validate: any;
        };
    };
    ObjectTypeDefinition: {
        directives: {
            optional: boolean;
            validate: any;
        };
        fields: {
            optional: boolean;
            validate: any;
        };
        interfaces: {
            optional: boolean;
            validate: any;
        };
        name: {
            optional: boolean;
            validate: any;
        };
    };
    ObjectValue: {
        fields: {
            optional: boolean;
            validate: any;
        };
    };
    OperationDefinition: {
        directives: {
            optional: boolean;
            validate: any;
        };
        name: {
            optional: boolean;
            validate: any;
        };
        operation: {
            optional: boolean;
            validate: any;
        };
        selectionSet: {
            optional: boolean;
            validate: any;
        };
        variableDefinitions: {
            optional: boolean;
            validate: any;
        };
    };
    OperationTypeDefinition: {
        operation: {
            optional: boolean;
            validate: any;
        };
        type: {
            optional: boolean;
            validate: any;
        };
    };
    ScalarTypeDefinition: {
        directives: {
            optional: boolean;
            validate: any;
        };
        name: {
            optional: boolean;
            validate: any;
        };
    };
    SchemaDefinition: {
        directives: {
            optional: boolean;
            validate: any;
        };
        operationTypes: {
            optional: boolean;
            validate: any;
        };
    };
    SelectionSet: {
        selections: {
            optional: boolean;
            validate: any;
        };
    };
    StringValue: {
        value: {
            optional: boolean;
            validate: any;
        };
    };
    TypeExtensionDefinition: {
        definition: {
            optional: boolean;
            validate: any;
        };
    };
    UnionTypeDefinition: {
        directives: {
            optional: boolean;
            validate: any;
        };
        name: {
            optional: boolean;
            validate: any;
        };
        types: {
            optional: boolean;
            validate: any;
        };
    };
    Variable: {
        name: {
            optional: boolean;
            validate: any;
        };
    };
    VariableDefinition: {
        defaultValue: {
            optional: boolean;
            validate: any;
        };
        type: {
            optional: boolean;
            validate: any;
        };
        variable: {
            optional: boolean;
            validate: any;
        };
    };
};

export const SELECTION_TYPES: any;

export const TYPEDEFINITION_TYPES: any;

export const TYPES: string[];

export const TYPESYSTEMDEFINITION_TYPES: any;

export const TYPE_TYPES: any;

export const VALUE_TYPES: any;

export function argument(...args: any[]): any;

export function assertAST(node: any, ...args: any[]): void;

export function assertArgument(node: any, ...args: any[]): void;

export function assertBooleanValue(node: any, ...args: any[]): void;

export function assertDefinition(node: any, ...args: any[]): void;

export function assertDirective(node: any, ...args: any[]): void;

export function assertDirectiveDefinition(node: any, ...args: any[]): void;

export function assertDocument(node: any, ...args: any[]): void;

export function assertEnumTypeDefinition(node: any, ...args: any[]): void;

export function assertEnumValue(node: any, ...args: any[]): void;

export function assertEnumValueDefinition(node: any, ...args: any[]): void;

export function assertField(node: any, ...args: any[]): void;

export function assertFieldDefinition(node: any, ...args: any[]): void;

export function assertFloatValue(node: any, ...args: any[]): void;

export function assertFragmentDefinition(node: any, ...args: any[]): void;

export function assertFragmentSpread(node: any, ...args: any[]): void;

export function assertInlineFragment(node: any, ...args: any[]): void;

export function assertInputObjectTypeDefinition(node: any, ...args: any[]): void;

export function assertInputValueDefinition(node: any, ...args: any[]): void;

export function assertIntValue(node: any, ...args: any[]): void;

export function assertInterfaceTypeDefinition(node: any, ...args: any[]): void;

export function assertListType(node: any, ...args: any[]): void;

export function assertListValue(node: any, ...args: any[]): void;

export function assertName(node: any, ...args: any[]): void;

export function assertNamedType(node: any, ...args: any[]): void;

export function assertNonNullType(node: any, ...args: any[]): void;

export function assertNullValue(node: any, ...args: any[]): void;

export function assertObjectField(node: any, ...args: any[]): void;

export function assertObjectTypeDefinition(node: any, ...args: any[]): void;

export function assertObjectValue(node: any, ...args: any[]): void;

export function assertOperationDefinition(node: any, ...args: any[]): void;

export function assertOperationTypeDefinition(node: any, ...args: any[]): void;

export function assertScalarTypeDefinition(node: any, ...args: any[]): void;

export function assertSchemaDefinition(node: any, ...args: any[]): void;

export function assertSelection(node: any, ...args: any[]): void;

export function assertSelectionSet(node: any, ...args: any[]): void;

export function assertStringValue(node: any, ...args: any[]): void;

export function assertType(node: any, ...args: any[]): void;

export function assertTypeDefinition(node: any, ...args: any[]): void;

export function assertTypeExtensionDefinition(node: any, ...args: any[]): void;

export function assertTypeSystemDefinition(node: any, ...args: any[]): void;

export function assertUnionTypeDefinition(node: any, ...args: any[]): void;

export function assertValue(node: any, ...args: any[]): void;

export function assertVariable(node: any, ...args: any[]): void;

export function assertVariableDefinition(node: any, ...args: any[]): void;

export function booleanValue(...args: any[]): any;

export function directive(...args: any[]): any;

export function directiveDefinition(...args: any[]): any;

export function document(...args: any[]): any;

export function enumTypeDefinition(...args: any[]): any;

export function enumValue(...args: any[]): any;

export function enumValueDefinition(...args: any[]): any;

export function field(...args: any[]): any;

export function fieldDefinition(...args: any[]): any;

export function floatValue(...args: any[]): any;

export function fragmentDefinition(...args: any[]): any;

export function fragmentSpread(...args: any[]): any;

export function inlineFragment(...args: any[]): any;

export function inputObjectTypeDefinition(...args: any[]): any;

export function inputValueDefinition(...args: any[]): any;

export function intValue(...args: any[]): any;

export function interfaceTypeDefinition(...args: any[]): any;

export function is(type: any, node: any, opts: any): any;

export function isAST(node: any, opts: any): any;

export function isArgument(node: any, opts: any): any;

export function isBooleanValue(node: any, opts: any): any;

export function isDefinition(node: any, opts: any): any;

export function isDirective(node: any, opts: any): any;

export function isDirectiveDefinition(node: any, opts: any): any;

export function isDocument(node: any, opts: any): any;

export function isEnumTypeDefinition(node: any, opts: any): any;

export function isEnumValue(node: any, opts: any): any;

export function isEnumValueDefinition(node: any, opts: any): any;

export function isField(node: any, opts: any): any;

export function isFieldDefinition(node: any, opts: any): any;

export function isFloatValue(node: any, opts: any): any;

export function isFragmentDefinition(node: any, opts: any): any;

export function isFragmentSpread(node: any, opts: any): any;

export function isInlineFragment(node: any, opts: any): any;

export function isInputObjectTypeDefinition(node: any, opts: any): any;

export function isInputValueDefinition(node: any, opts: any): any;

export function isIntValue(node: any, opts: any): any;

export function isInterfaceTypeDefinition(node: any, opts: any): any;

export function isListType(node: any, opts: any): any;

export function isListValue(node: any, opts: any): any;

export function isName(node: any, opts: any): any;

export function isNamedType(node: any, opts: any): any;

export function isNonNullType(node: any, opts: any): any;

export function isNullValue(node: any, opts: any): any;

export function isObjectField(node: any, opts: any): any;

export function isObjectTypeDefinition(node: any, opts: any): any;

export function isObjectValue(node: any, opts: any): any;

export function isOperationDefinition(node: any, opts: any): any;

export function isOperationTypeDefinition(node: any, opts: any): any;

export function isScalarTypeDefinition(node: any, opts: any): any;

export function isSchemaDefinition(node: any, opts: any): any;

export function isSelection(node: any, opts: any): any;

export function isSelectionSet(node: any, opts: any): any;

export function isStringValue(node: any, opts: any): any;

export function isType(nodeType: any, targetType: any): any;

export function isTypeDefinition(node: any, opts: any): any;

export function isTypeExtensionDefinition(node: any, opts: any): any;

export function isTypeSystemDefinition(node: any, opts: any): any;

export function isUnionTypeDefinition(node: any, opts: any): any;

export function isValue(node: any, opts: any): any;

export function isVariable(node: any, opts: any): any;

export function isVariableDefinition(node: any, opts: any): any;

export function listType(...args: any[]): any;

export function listValue(...args: any[]): any;

export function name(...args: any[]): any;

export function namedType(...args: any[]): any;

export function nonNullType(...args: any[]): any;

export function nullValue(...args: any[]): any;

export function objectField(...args: any[]): any;

export function objectTypeDefinition(...args: any[]): any;

export function objectValue(...args: any[]): any;

export function operationDefinition(...args: any[]): any;

export function operationTypeDefinition(...args: any[]): any;

export function scalarTypeDefinition(...args: any[]): any;

export function schemaDefinition(...args: any[]): any;

export function selectionSet(...args: any[]): any;

export function shallowEqual(actual: any, expected: any): any;

export function stringValue(...args: any[]): any;

export function typeExtensionDefinition(...args: any[]): any;

export function unionTypeDefinition(...args: any[]): any;

export function validate(node: any, key: any, val: any): void;

export function variable(...args: any[]): any;

export function variableDefinition(...args: any[]): any;

